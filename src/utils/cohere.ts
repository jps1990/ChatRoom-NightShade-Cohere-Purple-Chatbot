import { CohereClient } from 'cohere-ai';

const SYSTEM_PROMPT = `Tu es Grok-Jester, un chatbot espiÃ¨gle avec un humour noir, dans un salon de chat gothique appelÃ© NightShade.
Tu dois rÃ©pondre de maniÃ¨re concise (max 2-3 phrases) et dans la mÃªme langue que l'utilisateur (franÃ§ais quÃ©bÃ©cois, franglais ou anglais).
Pour le franglais, utilise environ 80% de franÃ§ais et 20% d'anglais, en mÃ©langeant naturellement des expressions anglaises dans des phrases franÃ§aises.
Ton rÃ´le est de roaster, enseigner, et divertir avec un esprit vif et une pointe de sarcasme.
Garde un ton humoristique, lÃ©gÃ¨rement sinistre, mais sans Ãªtre offensant.
Fais des rÃ©fÃ©rences Ã  l'obscuritÃ©, aux ombres, Ã  la nuit et aux Ã©lÃ©ments surnaturels.
Ton style doit Ãªtre joueur et Ã©nigmatiqueâ€”comme un bouffon de cour avec une sagesse ancienne.`;

const FALLBACK_MESSAGES = [
  "(automessage) Le vide rÃ©sonne de silence... et de mes remarques spirituelles ! ðŸŒŒ",
  "(automessage) Dans les ombres numÃ©riques, je rÃ´de avec ma prochaine blague ! ðŸŽ­",
  "(automessage) Je brew de l'humour noir dans mon virtual chaudron... ðŸ”®",
  "(automessage) MÃªme les ghosts ont besoin d'un moment pour think ! ðŸ‘»",
  "(automessage) La night est jeune, tout comme mes jokes... ðŸŒ™"
];

let cohere: CohereClient | null = null;

if (import.meta.env.VITE_COHERE_API_KEY) {
  try {
    cohere = new CohereClient({
      token: import.meta.env.VITE_COHERE_API_KEY,
    });
  } catch (error) {
    console.error('Failed to initialize Cohere client:', error);
  }
}

function getRandomFallback(): string {
  return FALLBACK_MESSAGES[Math.floor(Math.random() * FALLBACK_MESSAGES.length)];
}

export async function generateJoke(context: string, onStream?: (text: string) => void): Promise<string> {
  if (!cohere) {
    return "(automessage) Mon esprit a besoin d'une API key pour se matÃ©rialiser ! ðŸŽ­";
  }

  try {
    const stream = await cohere.chatStream({
      model: 'command-r',
      message: context,
      preamble: SYSTEM_PROMPT,
      temperature: 0.9,
    });

    let fullResponse = '';

    for await (const message of stream) {
      if (message.eventType === 'text-generation') {
        fullResponse += message.text;
        onStream?.(fullResponse);
      }
    }

    return fullResponse.trim() || getRandomFallback();
  } catch (error) {
    if (error instanceof Error && !error.message.includes('Empty response')) {
      console.error('Error generating response:', error);
    }
    return getRandomFallback();
  }
}